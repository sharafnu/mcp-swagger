#!/usr/bin/env node

/**
 * {{serverName}} - Generated MCP Server
 * {{description}}
 *
 * Generated at: {{metadata.generatedAt}}
 * Generator version: {{metadata.generatorVersion}}
 */

import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import process from 'process';
import { createTokenManager } from './utils/index.js';
import { AuthConfig } from './types/index.js';
import { registerTools } from './tools/index.js';

// Server configuration
const server = new McpServer({
  name: '{{serverName}}',
  version: '{{serverVersion}}',
  capabilities: {
    tools: true,
    resources: true,
    prompts: true,
  },
});

{{#if baseUrl}}
const baseUrl = process.env.API_BASE_URL || '{{baseUrl}}';
{{else}}
{{#each tools}}
{{#if @first}}
const baseUrl = process.env.API_BASE_URL || '{{baseUrl}}';
{{/if}}
{{/each}}
{{/if}}

// Environment configuration validation
const getAuthConfig = (): AuthConfig => {
  const clientId = process.env.CLIENT_ID;
  const clientSecret = process.env.CLIENT_SECRET;
  
  if (!clientId || !clientSecret) {
    throw new Error(`Missing required environment variables: CLIENT_ID, CLIENT_SECRET`);
  }
  
  const config: AuthConfig = {
    clientId,
    clientSecret,
    baseUrl: process.env.API_BASE_URL || '{{baseUrl}}',
    authEndpoint: process.env.AUTH_ENDPOINT || '/v2/auth/login'
  };
  
  return config;
};

// Initialize authentication system lazily
let tokenManager: ReturnType<typeof createTokenManager> | null = null;

const getTokenManager = () => {
  if (!tokenManager) {
    try {
      const authConfig = getAuthConfig();
      tokenManager = createTokenManager(authConfig);
    } catch (error) {
      console.error('Warning: Authentication not configured:', (error as Error).message);
      // Return a mock token manager for testing/inspection
      tokenManager = {
        getValidToken: async () => { throw new Error('Authentication not configured'); },
        refreshToken: async () => { throw new Error('Authentication not configured'); },
        cleanup: () => {},
        getStats: () => ({ token: null, expiry: null, lastRefresh: null, refreshCount: 0, failureCount: 0 })
      };
    }
  }
  return tokenManager;
};

// Graceful shutdown handling
process.on('SIGTERM', () => {
  console.error('Received SIGTERM, cleaning up...');
  if (tokenManager) {
    tokenManager.cleanup();
  }
  process.exit(0);
});

process.on('SIGINT', () => {
  console.error('Received SIGINT, cleaning up...');
  if (tokenManager) {
    tokenManager.cleanup();
  }
  process.exit(0);
});

// Register tools
registerTools(server, getTokenManager, baseUrl);

// Start server
const transport = new StdioServerTransport();
await server.connect(transport);
console.error('{{serverName}} MCP server running on stdio');