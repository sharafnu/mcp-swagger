/**
 * Utility functions for {{serverName}}
 * Generated utility functions
 */

import axios from 'axios';
import { setTimeout, clearTimeout } from 'timers';
import { AuthConfig, TokenCache, ToolParams } from '../types/index';

// Enhanced functional token cache with buffer and metrics
const createTokenCache = () => {
  let cachedToken: string | null = null;
  let tokenExpiry: Date | null = null;
  let refreshBuffer = 300; // 5 minutes buffer before expiry
  let lastRefreshTime: Date | null = null;
  let refreshCount = 0;
  let failureCount = 0;
  
  return {
    get: () => ({
      token: cachedToken,
      expiry: tokenExpiry,
      lastRefresh: lastRefreshTime,
      refreshCount,
      failureCount
    }),
    set: (token: string, expiresIn: number) => {
      cachedToken = token;
      tokenExpiry = new Date(Date.now() + (expiresIn * 1000));
      lastRefreshTime = new Date();
      refreshCount++;
      failureCount = 0; // Reset failure count on successful refresh
    },
    clear: () => {
      cachedToken = null;
      tokenExpiry = null;
      lastRefreshTime = null;
      failureCount++;
    },
    isExpired: () => {
      if (!tokenExpiry) return true;
      return new Date() >= tokenExpiry;
    },
    needsRefresh: () => {
      if (!tokenExpiry) return true;
      // Refresh token if within buffer time of expiry
      const bufferTime = new Date(tokenExpiry.getTime() - (refreshBuffer * 1000));
      return new Date() >= bufferTime;
    },
    getTimeToExpiry: () => {
      if (!tokenExpiry) return 0;
      return Math.max(0, tokenExpiry.getTime() - Date.now());
    },
    setRefreshBuffer: (seconds: number) => {
      refreshBuffer = seconds;
    }
  };
};

// Enhanced authentication with retry and backoff
const authenticate = async (config: AuthConfig, attempt = 1): Promise<{ access_token: string; expires_in?: number }> => {
  const maxRetries = 3;
  const baseDelay = 1000; // 1 second base delay
  
  try {
    const response = await axios.post(`${config.baseUrl}${config.authEndpoint}`, {
      username: config.clientId,
      password: config.clientSecret
    }, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000
    });
    return response.data;
  } catch (error) {
    if (
      axios.isAxiosError(error) &&
      attempt < maxRetries &&
      error.response?.status &&
      error.response.status >= 500
    ) {
      // Exponential backoff for server errors
      const delay = baseDelay * Math.pow(2, attempt - 1);
      await new Promise(resolve => setTimeout(resolve, delay));
      return authenticate(config, attempt + 1);
    }
    throw error;
  }
};

// Advanced token manager with proactive refresh and concurrency control
export const createTokenManager = (config: AuthConfig) => {
  const cache = createTokenCache();
  let refreshPromise: Promise<string> | null = null; // Prevent concurrent refresh attempts
  let proactiveRefreshTimer: ReturnType<typeof setTimeout> | null = null;
  
  const scheduleProactiveRefresh = (timeToRefresh: number) => {
    if (proactiveRefreshTimer) {
      clearTimeout(proactiveRefreshTimer);
    }
    
    // Schedule refresh 5 minutes before expiry
    const refreshTime = Math.max(1000, timeToRefresh - 300000);
    proactiveRefreshTimer = setTimeout(async () => {
      try {
        await refreshToken();
      } catch (error) {
        // Ignore refresh errors
      }
    }, refreshTime);
  };
  
  const refreshToken = async () => {
    if (refreshPromise) {
      // Wait for existing refresh to complete
      return refreshPromise;
    }
    
    refreshPromise = (async () => {
      try {
        const authData = await authenticate(config);
        cache.set(authData.access_token, authData.expires_in || 3600);
        
        // Schedule next proactive refresh
        const timeToExpiry = cache.getTimeToExpiry();
        scheduleProactiveRefresh(timeToExpiry);
        
        return authData.access_token;
      } catch (error) {
        cache.clear();
        throw new Error(`Authentication failed: ${(error as Error).message}`);
      } finally {
        refreshPromise = null;
      }
    })();
    
    return refreshPromise;
  };
  
  const getValidToken = async () => {
    const { token, failureCount } = cache.get();
    
    // Implement exponential backoff for repeated failures
    if (failureCount > 0) {
      const backoffDelay = Math.min(30000, 1000 * Math.pow(2, failureCount - 1));
      await new Promise(resolve => setTimeout(resolve, backoffDelay));
    }
    
    if (!token || cache.needsRefresh()) {
      return refreshToken();
    }
    
    return token;
  };
  
  // Initialize proactive refresh if token exists
  const initializeProactiveRefresh = () => {
    const { token } = cache.get();
    if (token && !cache.isExpired()) {
      const timeToExpiry = cache.getTimeToExpiry();
      scheduleProactiveRefresh(timeToExpiry);
    }
  };
  
  // Cleanup function
  const cleanup = () => {
    if (proactiveRefreshTimer) {
      clearTimeout(proactiveRefreshTimer);
    }
  };
  
  // Initialize
  initializeProactiveRefresh();
  
  return {
    getValidToken,
    refreshToken,
    cleanup,
    getStats: () => cache.get()
  };
};

// Dynamic header parameter extraction from OpenAPI spec
const extractHeaderParams = (params: ToolParams): Record<string, string> => {
  const headerParams: Record<string, string> = {};
  
  // Extract all parameter keys that could be headers
  Object.keys(params).forEach(key => {
    // Skip parameters that are clearly not headers
    if (isHeaderParameter(key, params[key])) {
      const headerName = convertToHeaderName(key);
      headerParams[headerName] = String(params[key]);
    }
  });
  
  return headerParams;
};

// Intelligent header parameter detection
const isHeaderParameter = (paramName: string, paramValue: unknown) => {
  // Skip null/undefined values
  if (paramValue === null || paramValue === undefined) {
    return false;
  }
  
  // Common header patterns (case-insensitive)
  const headerPatterns = [
    /^x[_-]/i,              // X-* headers (X-Payload-Signature, X-Request-ID)
    /^accept[_-]/i,         // Accept-* headers
    /^content[_-]/i,        // Content-* headers
    /^authorization$/i,     // Authorization header
    /^user[_-]agent$/i,     // User-Agent header
    /^correlation[_-]id$/i, // Correlation-ID variants
    /^request[_-]id$/i,     // Request-ID variants
    /^trace[_-]id$/i,       // Trace-ID variants
    /^api[_-]key$/i,        // API-Key variants
    /^client[_-]id$/i,      // Client-ID variants
    /signature$/i,          // *-Signature headers
    /^bearer$/i,            // Bearer token
    /^basic$/i,             // Basic auth
    /^etag$/i,              // ETag header
    /^if[_-]/i,             // If-* headers
    /^cache[_-]/i,          // Cache-* headers
    /^pragma$/i,            // Pragma header
    /^referer$/i,           // Referer header
    /^origin$/i,            // Origin header
    /^host$/i,              // Host header
    /^forwarded$/i,         // Forwarded headers
    /^via$/i                // Via header
  ];
  
  // Check if parameter name matches header patterns
  return headerPatterns.some(pattern => pattern.test(paramName));
};

// Convert parameter name to proper HTTP header format
const convertToHeaderName = (paramName: string) => {
  // Handle common parameter naming conventions
  let headerName = paramName
    .replace(/_/g, '-')          // Convert underscores to hyphens
    .replace(/([a-z])([A-Z])/g, '$1-$2') // Convert camelCase to kebab-case
    .toLowerCase();              // Convert to lowercase first
  
  // Capitalize each word (HTTP header convention)
  return headerName
    .split('-')
    .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('-');
};

// Enhanced header validation and sanitization
const validateAndSanitizeHeader = (name: string, value: unknown) => {
  // Validate header name (RFC 7230)
  if (!/^[a-zA-Z0-9!#$&'*+\-.^_`|~]+$/.test(name)) {
    return null;
  }
  
  // Sanitize header value (remove control characters)
  const sanitizedValue = String(value)
    .replace(/[\x00-\x1F\x7F]/g, '') // Remove control characters
    .trim();
  
  // Validate header value is not empty after sanitization
  if (!sanitizedValue) {
    return null;
  }
  
  return { name, value: sanitizedValue };
};

// Enhanced header building with comprehensive parameter detection
export const buildAuthenticatedHeaders = async (params: ToolParams, tokenManager: { getValidToken: () => Promise<string> }): Promise<Record<string, string>> => {
  const maxRetries = 2;
  let lastError: Error | null = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const token = await tokenManager.getValidToken();
      const baseHeaders = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      };
      
      // Extract and validate all header parameters dynamically
      const rawHeaderParams = extractHeaderParams(params);
      const validatedHeaders: Record<string, string> = {};
      
      // Validate and sanitize each header before adding
      Object.entries(rawHeaderParams).forEach(([name, value]) => {
        const validated = validateAndSanitizeHeader(name, value);
        if (validated) {
          validatedHeaders[validated.name] = validated.value;
        }
      });
      
      return { ...baseHeaders, ...validatedHeaders };
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error));
      if (attempt < maxRetries) {
        // Short delay before retry
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }
  
  throw new Error(`Failed to build authenticated headers after ${maxRetries} attempts: ${(lastError as Error).message}`);
};

// Helper function to reconstruct nested objects from flattened parameters
export const setNestedProperty = (obj: Record<string, unknown>, path: string, value: unknown) => {
  const keys = path.split('.');
  let current = obj;
  
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (!(key in current) || typeof current[key] !== 'object') {
      current[key] = {};
    }
    current = current[key] as Record<string, unknown>;
  }
  
  current[keys[keys.length - 1]] = value;
};